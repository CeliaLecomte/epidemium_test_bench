detach("package:RJSONIO", unload=TRUE)
library("RJSONIO", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:rPython", unload=TRUE)
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
scipy$executable
sys$executable
remove.packages("rPython")
remove.packages("reticulate")
detach("package:RJSONIO", unload=TRUE)
install.packages("reticulate")
install.packages("reticulate")
Sys.getenv()
sys <- import("sys")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
detach("package:reticulate", unload=TRUE)
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
install.packages("rPythnon")
install.packages("rPython")
sys <- import("sys")
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
detach("package:reticulate", unload=TRUE)
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
scipy <- import("sys")
scipy <- import("sysdfssf")
sys <- import("sys")
detach("package:tensorflow", unload=TRUE)
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
remove.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
sys <- import("sys")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
system("python --version")
sys <- import("sys")
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
Sys.getenv()
Sys.setenv(PATH ="/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/texbin:/opt/local/bin")
Sys.setenv(PATH ="/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/texbin:/opt/local/bin")
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
sys$executable
remove.packages("rPython")
install.packages("rPython")
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
sys$executable
Sys.setenv(TENSORFLOW_PYTHON="/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python")
sys <- import("sys")
sys$executable
remove.packages("tensorflow")
sys <- import("sys")
sys$executable
install.packages("tensorflow")
install.packages("tensorflow")
Sys.getenv()
Sys.setenv(PATH ="/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/texbin:/opt/local/bin")
Sys.getenv()
sys <- import("sys")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:reticulate", unload=TRUE)
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
detach("package:reticulate", unload=TRUE)
sys <- import("sys")
detach("package:tensorflow", unload=TRUE)
sys <- import("sys")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
sys$executable
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
remove.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
detach("package:reticulate", unload=TRUE)
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
sys$executable
Sys.setenv(PATH = paste("/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/texbin:/opt/local/bin")
)
sys <- import("sys")
sys$executable
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys$executable
system("python --version")
sys$executable
sys <- import("sys")
sys$executable
use_python("/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python")
sys <- import("sys")
sys$executable
use_python("/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7")
sys <- import("sys")
sys$executable
py_config()
Sys.setenv(PATH ="/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/texbin:/opt/local/bin")
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
source("/Users/mehdibenchoufi/.Rprofile")
Sys.getenv()
Sys.setenv(TENSORFLOW_PYTHON="/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python")
sys <- import("sys")
sys$executable
source("/Users/mehdibenchoufi/.Rprofile")
sys <- import("sys")
sys$executable
Sys.getenv("PATH")
sys <- import("sys")
sys$executable
py_config()
Sys.setenv(PATH = paste("/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python2.7")
)
py_config()
Sys.getenv("PATH")
source(~/.Rprofile)
source("User/mehdibenchoufi/.Rprofile")
source("Users/mehdibenchoufi/.Rprofile")
source("/Users/mehdibenchoufi/.Rprofile")
Sys.setenv(PATH = paste("/Users/mehdibenchoufi/.pyenv/versions/2.7.10/bin/python", Sys.getenv("PATH"), sep=":")
)
Sys.getenv()
source("/Users/mehdibenchoufi/.Rprofile")
Sys.getenv()
Sys.getenv()
?Startup
getwd()
Sys.getenv()
getwd()
lswd()
Sys.getenv()
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
py_config()
sys <- import("sys")
sys$executable
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
sys$executable
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
sys$executable
Sys.getenv()
sys <- import("sys")
sys$executable
Sys.getenv()
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
Sys.getenv("PATH")
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
Sys.getenv("PATH")
sys <- import("sys")
sys$executable
Sys.getenv("PATH")
py_config()
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
py_config()
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:tensorflow", unload=TRUE)
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("rPython", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
Sys.getenv("PATH")
Sys.getenv("PATH")
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
Sys.getenv("PATH")
Sys.getenv("PATH")
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
Sys.getenv("PATH")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
detach("package:reticulate", unload=TRUE)
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
Sys.getenv("PATH")
detach("package:reticulate", unload=TRUE)
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
detach("package:reticulate", unload=TRUE)
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
Sys.getenv("PATH")
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
detach("package:tensorflow", unload=TRUE)
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
remove.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
sys <- import("sys")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
py_config()
tf$Session()
Sys.which("python")
Sys.which("python")
Sys.which("python")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
sys <- import("sys")
Sys.which("python")
Sys.getenv()
Sys.which("python")
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
Sys.which("python")
sys <- import("sys")
py_config()
system("python --version")
which("version")
devtools::install_github("rstudio/keras")
library(keras)
install_keras()
library(kerasd)
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
install_keras()
library("tensorflow", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install_tensorflow()
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras",force = TRUE)
library("keras", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
mnist <- dataset_mnist()
remove.packages("keras")
install.packages("keras")
library("keras", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
dim(x_train) <- c(nrow(x_train), 784)
dim(x_test) <- c(nrow(x_test), 784)
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
library(keras)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
str(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
plot(history)
data
str(data)
load("~/Desktop/Sites/R projects/incidence_viz_dev.RData")
str(data)
dim(data)
train_data <- data[30,]
train_data <- data
length(data$incidence)
data$incidence[1]
data$incidence[2]
data$incidence[0]
train_data$forecast <- data$incidence[c(2:length(data$incidence),NA]
train_data$forecast <- data$incidence[c(2:length(data$incidence),NA)]
train_data$forecast
test_data <- train_data[1:(length(data)]
test_data <- train_data[c(1:(length(data))]
test_data <- train_data[c(1:(length(data)),]
test_data <- train_data[1:(length(data),]
data[1,]
data[1:2,]
data[c(1:2),]
train_data[c(1:2),]
train_data[c(1:length(data)),]
train_data
train_data[c(1:length(data)),]
length(data)
nrows(data)
nrow(data)
train_data <- train_data[c(1:nrow(data)),]
str(train_data)
train_data <- train_data[c(1:nrow(data)-1),]
train_data$incidence
train_data$forecast
mod <- Sequential()
library(kerasR)
library(keras)
mod <- Sequential()
mod <- sequential()
mod <-  keras_model_sequential()
mod$add(LSTM(4, input_shape = (1,1))
mod$add(LSTM(4, input_shape = (1))
)
install.packages("kerasR")
detach("package:keras", unload=TRUE)
library("kerasR", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
kerasR::keras_init()
reticulate::use_python()
library("reticulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
reticulate::use_python()
use_python()
mod %>% layer_lstm(4,input_shape=c(1,1)) %>% layer_dense(1) %>% layer_activation("linear")
mod %>% layer_lstm(4,input_shape=c(1,1)) %>% layer_dense(1)
mod <- keras_model_sequential()
library("keras", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
mod <- keras_model_sequential()
mod %>% layer_lstm(4,input_shape=c(1,1)) %>% layer_dense(1) %>% layer_activation("linear")
mod%>%compile(loss="mean_squared_error",optimizer="adam")
i
f
forecast
train_data$forecast
train_data$incidence
tm <- array(train_data$incidence,dim=c(length(train_data$incidence),1,1))
mod %>% fit(tm,train_data$forecast,epochs=20)
mod %>% predict(tm)
library("kerasR", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
mod <- Sequential()
mod$add(Dense(units = 50, input_shape = 13))
mod$add(Activation("relu"))
mod$add(Dense(units = 1))
keras_compile(mod,  loss = 'mse', optimizer = RMSprop())
boston <- load_boston_housing()
X_train <- scale(boston$X_train)
Y_train <- boston$Y_train
X_test <- scale(boston$X_test)
Y_test <- boston$Y_test
keras_fit(mod, X_train, Y_train,
batch_size = 32, epochs = 200,
verbose = 1, validation_split = 0.1)
output
pred <- keras_predict(mod, normalize(X_test))
pred
clear
mod <- Sequential()
model$add(LSTM(4, input_shape=(1,1)))
model$add(LSTM(4, input_shape=c(1,1)))
mod$add(LSTM(4, input_shape=c(1,1)))
model$add(Dense(1))
mod$add(Dense(1))
mod$compile(loss='mean_squared_error', optimizer='adam')
str(tm)
mod$fit(tm, train_data$forecast, epochs=20)
str(tm)
str(train_data$forecast)
mod$fit(tm, train_data$forecast)
pred <- keras_predict(mod,tm)
pred
mod <- Sequential()
model$add(LSTM(4, input_shape=(1,1)))
model$add(LSTM(4, input_shape=c(1,1)))
mod$add(LSTM(4, input_shape=c(1,1)))
model$add(Dense(1))
mod$add(Dense(1))
keras_compile(mod,  loss = 'mse', optimizer = RMSprop())
mod$fit(tm, train_data$forecast)
pred <- keras_predict(mod,tm)
pred
mod <- Sequential()
mod$add(Dense(units = 50, input_shape = 13))
mod$add(Activation("relu"))
mod$add(Dense(units = 1))
keras_compile(mod,  loss = 'mse', optimizer = RMSprop())
boston <- load_boston_housing()
X_train <- boston$X_train
X_train
Y_train <- boston$Y_train
Y_train
output <- keras_fit(mod, X_train, Y_train,epochs = 20,
verbose = 1)
str(X_train)
output
str(output)
summary(output)
pred <- keras_predict(mod, X_train)
pred
str(X_train)
X_train <- Xtrain(1:44,1:13)
X_train <- X_train[1:44,1:13]
Y_train <- Y_train[1:44]
keras_compile(mod,  loss = 'mse', optimizer = RMSprop())
mod <- Sequential()
mod$add(Dense(units = 50, input_shape = 13))
mod$add(Activation("relu"))
mod$add(Dense(units = 1))
keras_compile(mod,  loss = 'mse', optimizer = RMSprop())
output <- keras_fit(mod, X_train, Y_train,epochs = 20,
)
pred <- keras_predict(mod, X_train)
pred
mod <- Sequential()
mod$add(LSTM(4, input_shape=c(1,1)))
mod$add(Activation("relu"))
model$add(Dense(1))
mod$add(Dense(1))
keras_compile(mod,  loss = 'mse', optimizer = RMSprop())
output <- keras_fit(mod, tm, train_data$forecast,epochs = 20)
pred <- keras_predict(mod,tm)
pred
# since we are using stateful rnn tsteps can be set to 1
tsteps <- 1
batch_size <- 25
epochs <- 25
# number of elements ahead that are used to make the prediction
lahead <- 1
# Generates an absolute cosine time series with the amplitude exponentially decreasing
# Arguments:
#   amp: amplitude of the cosine function
#   period: period of the cosine function
#   x0: initial x of the time series
#   xn: final x of the time series
#   step: step of the time series discretization
#   k: exponential rate
gen_cosine_amp <- function(amp = 100, period = 1000, x0 = 0, xn = 50000, step = 1, k = 0.0001) {
n <- (xn-x0) * step
cos <- array(data = numeric(n), dim = c(n, 1, 1))
for (i in 1:length(cos)) {
idx <- x0 + i * step
cos[[i, 1, 1]] <- amp * cos(2 * pi * idx / period)
cos[[i, 1, 1]] <- cos[[i, 1, 1]] * exp(-k * idx)
}
cos
}
cat('Generating Data...\n')
cos <- gen_cosine_amp()
cat('Input shape:', dim(cos), '\n')
expected_output <- array(data = numeric(length(cos)), dim = c(length(cos), 1))
for (i in 1:(length(cos) - lahead)) {
expected_output[[i, 1]] <- mean(cos[(i + 1):(i + lahead)])
}
cat('Output shape:', dim(expected_output), '\n')
cat('Creating model:\n')
model <- keras_model_sequential()
model %>%
layer_lstm(units = 50, input_shape = c(tsteps, 1), batch_size = batch_size,
return_sequences = TRUE, stateful = TRUE) %>%
layer_lstm(units = 50, return_sequences = FALSE, stateful = TRUE) %>%
layer_dense(units = 1)
model %>% compile(loss = 'mse', optimizer = 'rmsprop')
cat('Training\n')
for (i in 1:epochs) {
model %>% fit(cos, expected_output, batch_size = batch_size,
epochs = 1, verbose = 1, shuffle = FALSE)
model %>% reset_states()
}
cat('Predicting\n')
predicted_output <- model %>% predict(cos, batch_size = batch_size)
cat('Plotting Results\n')
op <- par(mfrow=c(2,1))
plot(expected_output, xlab = '')
title("Expected")
plot(predicted_output, xlab = '')
title("Predicted")
par(op)
str(cos)
plot(cos)
plot(cos)
cos
head(cos,10)
str(cos)
head(cos,1000)
numeric(n)
n
head(cos,10)
cos[[1,1,1]]
cos[[3,1,1]]
cos[3,1,1]
op <- par(mfrow=c(2,2))
plot(expected_output, xlab = '')
title("Expected")
plot(predicted_output, xlab = '')
title("Predicted")
par(op)
predicted_output
cat('Plotting Results\n')
op <- par(mfrow=c(2,1))
plot(expected_output, xlab = '')
title("Expected")
plot(predicted_output, xlab = '')
title("Predicted")
par(op)
save.image("~/Desktop/Sites/R projects/LSTM.RData")
shiny::runApp('incidence_viz')
